df_train <- read.csv('pml-training.csv')
df_test  <- read.csv('pml-testing.csv')
col_names <- colnames(df_test)
ind <- 1
indices <- c()
for (name in col_names){
tmp <- factor(df_test[name])
if (length(which(is.na(df_test[name]))) == 20){
indices <- c(indices, ind)
}
ind <- ind + 1
}
df_train <- df_train[, -indices]
df_test <- df_test[, -indices]
step_model<-step(lm(classe~.,df_train),trace=0,steps=10000)
df <- read.csv('pml-training.csv')
library(dplyr)
library(caret)
rm(list=ls())
df <- read.csv('pml-training.csv')
df_evaluate  <- read.csv('pml-testing.csv')
col_names <- colnames(df)
ind <- 1
indices <- c()
for (name in col_names){
if (length(which(is.na(df_evaluate[name]))) == 20){
indices <- c(indices, ind)
}
ind <- ind + 1
}
dim(df_evaluate)
dim(df)
name
df <- read.csv('pml-training.csv')
df_evaluate  <- read.csv('pml-testing.csv')
col_names <- colnames(df_evaluate)
ind <- 1
indices <- c()
for (name in col_names){
if (length(which(is.na(df_evaluate[name]))) == 20){
indices <- c(indices, ind)
}
ind <- ind + 1
}
inTrain <- crfeateDAtaPartition(y=df$classe, p=0.7, list=FALSE)
inTrain <- createDAtaPartition(y=df$classe, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=df$classe, p=0.7, list=FALSE)
df_train <- df[inTrain, -indices]
df_test <- df[-inTrain, -indices]
df_evaluate <- df_evaluate[, -indices]
df_train.pca <- prcomp(df_train, center = TRUE, scale = TRUE)
df_train.pca <- prcomp(df_train)
dim(df_train)[2]-1
df_train.pca <- prcomp(df_train[, 1:dim(df_train)[2]-1], center = TRUE, scale = TRUE)
df_train[, 1:dim(df_train)[2]-1]
df_train.pca <- prcomp(df_train[, 9:dim(df_train)[2]-1], center = TRUE, scale = TRUE)
summary(df_train.pca)
df_test[, 6:dim(df_test)[2]]
head(df_test)
head(df_test[, 6:dim(df_test)[2]])
head(df_test[, 8:dim(df_test)[2]])
1:5:10
seq(25, 500, by=25)
df_train.pca <- prcomp(df_train[, 9:dim(df_train)[2]-1], center = TRUE, scale = TRUE)
summary(df_train.pca)
dim(df_train)
dim(df_train)[2]
data(spam)
library(spam)
data(spam)
dim(spam)
dim(Spam)
dim(spam)
install.packages('spam')
install.packages("spam")
library(dplyr)
library(caret)
rm(list=ls())
df <- read.csv('pml-training.csv')
df_evaluate  <- read.csv('pml-testing.csv')
col_names <- colnames(df_evaluate)
ind <- 1
indices <- c()
for (name in col_names){
if (length(which(is.na(df_evaluate[name]))) == 20){
indices <- c(indices, ind)
}
ind <- ind + 1
}
inTrain <- createDataPartition(y=df$classe, p=0.7, list=FALSE)
df_train <- df[inTrain, -indices]
df_test <- df[-inTrain, -indices]
df_evaluate <- df_evaluate[, -indices]
df_train <- df_train[, 8:dim(df_train)[2]]
df_test <- df_test[, 8:dim(df_test)[2]]
df_test <- df_evaluate[, 8:dim(df_evaluate)[2]]
df_train.pca <- prcomp(df_train[, 9:dim(df_train)[2]-1], center = TRUE, scale = TRUE)
summary(df_train.pca)
n_best <- 0
ntrees_best <- 0
ncomps_best <- 0
fit_best <- NULL
ntrees <- 100
ncomps <- 26
pre_process <- preProcess(df_train[, dim(df_train)[2]-1], method='pca', pcaComp=ncomps)
pre_process <- preProcess(df_train[, dim(df_train)[2]-1], method='pca', pcaComp=ncomps)
pre_process <- preProcess(df_train[, -dim(df_train)[2]-1], method='pca', pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]-1])
dim(train_pc)
model_fit <- train(
df_train[, dim(df_train)[2]] ~ .,
data=train_pc,
method='rf',
ntree=ntrees
)
model_fit
df_train[, dim(df_train)[2]]
train_pc
ntrees
ntrees <- 2
model_fit <- train(
df_train[, dim(df_train)[2]] ~ .,
data=train_pc,
method='rf',
ntree=ntrees
)
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]-1])
test_outcome <- predict(model_fit, test_pc)
test_outcome <- predict(model_fit, newdata=test_pc)
colnames(df_test)
colnames(test_pc)
colnames(df_train)
colnames(train_pc)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
test_outcome
df_test$problem_id
col_names <- colnames(df_evaluate)
ind <- 1
indices <- c()
for (name in col_names){
if (length(which(is.na(df_evaluate[name]))) == 20){
indices <- c(indices, ind)
}
ind <- ind + 1
}
inTrain <- createDataPartition(y=df$classe, p=0.7, list=FALSE)
df_train <- df[inTrain, -indices]
library(dplyr)
library(caret)
rm(list=ls())
df <- read.csv('pml-training.csv')
df_evaluate  <- read.csv('pml-testing.csv')
col_names <- colnames(df_evaluate)
ind <- 1
indices <- c()
for (name in col_names){
if (length(which(is.na(df_evaluate[name]))) == 20){
indices <- c(indices, ind)
}
ind <- ind + 1
}
inTrain <- createDataPartition(y=df$classe, p=0.7, list=FALSE)
df_train <- df[inTrain, -indices]
df_test <- df[-inTrain, -indices]
df_evaluate <- df_evaluate[, -indices]
df_train <- df_train[, 8:dim(df_train)[2]]
df_test <- df_test[, 8:dim(df_test)[2]]
df_evaluate <- df_evaluate[, 8:dim(df_evaluate)[2]]
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
ncomps <- 26
ntrees <- 2
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
test_outcome
n_corr <- length(which(test_outcome == df_test[, dim(df_test)[2]]))
n_corr
dim(df_test)
4737 / 5885
library(dplyr)
library(caret)
rm(list=ls())
library(dplyr)
library(caret)
rm(list=ls())
df <- read.csv('pml-training.csv')
df_evaluate  <- read.csv('pml-testing.csv')
col_names <- colnames(df_evaluate)
ind <- 1
indices <- c()
for (name in col_names){
if (length(which(is.na(df_evaluate[name]))) == 20){
indices <- c(indices, ind)
}
ind <- ind + 1
}
inTrain <- createDataPartition(y=df$classe, p=0.7, list=FALSE)
df_train <- df[inTrain, -indices]
df_test <- df[-inTrain, -indices]
df_evaluate <- df_evaluate[, -indices]
df_train <- df_train[, 8:dim(df_train)[2]]
df_test <- df_test[, 8:dim(df_test)[2]]
df_evaluate <- df_evaluate[, 8:dim(df_evaluate)[2]]
df_train.pca <- prcomp(df_train[, 9:dim(df_train)[2]-1], center = TRUE, scale = TRUE)
summary(df_train.pca)
n_best <- 0
ntrees_best <- 0
ncomps_best <- 0
fit_best <- NULL
for (ntrees in seq(10, 100, by=10)){
for (ncomps in seq(13, 26, by=5)) {
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
n_corr <- length(which(test_outcome == df_test[, dim(df_test)[2]]))
print(n_corr)
if (n_corr > n_best){
print('best ncorr')
ntrees_best <- ntrees
ncomps_best <- ncomps
fit_best <- fit
}
}
}
n_best <- 0
ntrees_best <- 0
ncomps_best <- 0
fit_best <- NULL
for (ntrees in seq(10, 100, by=10)){
for (ncomps in seq(13, 26, by=1)) {
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
n_corr <- length(which(test_outcome == df_test[, dim(df_test)[2]]))
print(n_corr)
if (n_corr > n_best){
print('best ncorr')
ntrees_best <- ntrees
ncomps_best <- ncomps
fit_best <- model_fit
}
}
}
n_best <- 0
ntrees_best <- 0
ncomps_best <- 0
fit_best <- NULL
n_trees_c <- NULL
n_comps_c <- NULL
n_corr_c <- NULL
for (ntrees in seq(10, 100, by=10)){
for (ncomps in seq(13, 26, by=1)) {
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
n_corr <- length(which(test_outcome == df_test[, dim(df_test)[2]]))
n_trees_c <- C(n_trees_c, ntrees)
n_comps_c <- c(n_comps_c, ncomps)
n_corr_c <- c(n_corr_c, n_corr)
print(n_corr)
if (n_corr > n_best){
n_best <- n_corr
print('best ncorr')
ntrees_best <- ntrees
ncomps_best <- ncomps
fit_best <- model_fit
}
}
}
n_best <- 0
ntrees_best <- 0
ncomps_best <- 0
fit_best <- NULL
n_trees_c <- c()
n_comps_c <- c()
n_corr_c <- c()
for (ntrees in seq(10, 100, by=10)){
for (ncomps in seq(13, 26, by=1)) {
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
n_corr <- length(which(test_outcome == df_test[, dim(df_test)[2]]))
n_trees_c <- C(n_trees_c, ntrees)
n_comps_c <- c(n_comps_c, ncomps)
n_corr_c <- c(n_corr_c, n_corr)
print(n_corr)
if (n_corr > n_best){
n_best <- n_corr
print('best ncorr')
ntrees_best <- ntrees
ncomps_best <- ncomps
fit_best <- model_fit
}
}
}
class(n_trees_c)
class(ntrees)
a <- data.frame
a
a <- data.frame()
b <- data.frame(c(trees=ntrees, comps=ncomps, corr=n_corr))
rbind(a, b)
c <- rbind(a, b)
c <- rbind(c, b)
c
cbind(a, b)
a
b
ntrees
ncomps
n_corr
c(trees=ntrees, comps=ncomps, corr=n_corr)
a <- c(trees=ntrees, comps=ncomps, corr=n_corr)
rbind(a, a)
res <- rbind(res, c(trees=ntrees, comps=ncomps, corr=n_corr))
res <- NULL
res <- rbind(res, c(trees=ntrees, comps=ncomps, corr=n_corr))
res <- rbind(res, c(trees=ntrees, comps=ncomps, corr=n_corr))
res
n_best <- 0
ntrees_best <- 0
ncomps_best <- 0
fit_best <- NULL
res <- NULL
for (ntrees in seq(10, 100, by=10)){
for (ncomps in seq(13, 26, by=1)) {
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
n_corr <- length(which(test_outcome == df_test[, dim(df_test)[2]]))
res <- rbind(res, c(trees=ntrees, comps=ncomps, corr=n_corr))
print(n_corr)
if (n_corr > n_best){
n_best <- n_corr
print('best ncorr')
ntrees_best <- ntrees
ncomps_best <- ncomps
fit_best <- model_fit
}
}
}
res
dim(df_test)
n_best <- 0
ntrees_best <- 0
ncomps_best <- 0
fit_best <- NULL
res <- NULL
for (ntrees in seq(10, 100, by=10)){
for (ncomps in seq(13, 26, by=1)) {
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps)
train_pc <- predict(pre_process, df_train[, -dim(df_train)[2]])
model_fit <- train(
y=df_train[, dim(df_train)[2]],
x= train_pc,
method='rf',
ntree=ntrees
)
test_pc <- predict(pre_process, df_test[, -dim(df_test)[2]])
test_outcome <- predict(model_fit, newdata=test_pc)
n_corr <- length(which(test_outcome == df_test[, dim(df_test)[2]]))
res <- rbind(res, c(trees=ntrees, comps=ncomps, corr=n_corr))
print(n_corr)
if (n_corr > n_best){
n_best <- n_corr
print('best ncorr')
ntrees_best <- ntrees
ncomps_best <- ncomps
fit_best <- model_fit
}
}
}
r
res
res_a <- res[1:112, ]
res_a
df_res <- data.frame(res_a)
df_res
head(df_es)
head(df_res)
plot(trees ~ comps, data=df_res, col=corr)
plot(trees ~ comps, data=df_res, col=corr)
plot(trees ~ comps, data=df_res, col=corr, size=corr)
?plot
plot(trees ~ comps, data=df_res, col=as.numeric(corr))
v <- ggplot(df_res, aes(trees, comps, z = corr))
v + geom_contour(colour='white')
v <- ggplot(df_res, aes(trees, comps, z = corr))
v + geom_contour(colour='white')
print(V)
print(v)
v <- ggplot(df_res, aes(trees, comps, z = corr))
v <- v + geom_contour(colour='white')
print(v)
v <- ggplot(df_res, aes(trees, comps, z = corr))
v <- v + geom_contour()
print(v)
library(ggplot2)
v <- ggplot(df_res, aes(trees, comps, z = corr))
v <- v + geom_contour()
print(v)
v <- ggplot(df_res, aes(trees, comps, z = corr))
v <- v + geom_contour(colour='white')
print(v)
v <- ggplot(df_res, aes(trees, comps, z = corr))
v <- v + geom_raster(aes(fill = density))
v <- v + geom_contour(colour='white')
print(v)
v <- ggplot(df_res, aes(trees, comps, z = corr))
v <- v + geom_raster(aes(fill = corr))
v <- v + geom_contour(colour='white')
print(v)
v <- ggplot(df_res, aes(trees, comps, z = corr))
v <- v + geom_raster(aes(fill = corr))
# v <- v + geom_contour(colour='white')
print(v)
ntrees_best
ncomps_best
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps_best)
evaluate_pc <- predict(pre_process, df_evaluate[, -dim(df_evaluate)[2]])
evaluate_outcome <- predict(best_fit, newdata=evaluate_pc)
pre_process <- preProcess(
df_train[, -dim(df_train)[2]-1],
method='pca',
pcaComp=ncomps_best)
evaluate_pc <- predict(pre_process, df_evaluate[, -dim(df_evaluate)[2]])
evaluate_outcome <- predict(fit_best, newdata=evaluate_pc)
print(evaluate_outcome)
